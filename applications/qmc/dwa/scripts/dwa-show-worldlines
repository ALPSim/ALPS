#!/opt/local/bin/python

import sys
import numpy
import matplotlib.pyplot
import worldlines

### Detecting system errors
if (len(sys.argv) == 1):
  print "\n";
  print "Warnung!!! Bitte geben Sie den folgenden Befehl ein."
  print "  plot-worldlines.py <filename-of-worldlines-in-hdf5-format>"
  print "\n"
  sys.exit(2)

### Loading worldlines
infile = sys.argv[1]
wl = worldlines.worldlines()
wl.load(infile);

wl_siteindicator = wl.worldlines_siteindicator();
wl_time = wl.worldlines_time();
wl_state = wl.worldlines_state();

wl_coordinates = [];
for idx1 in range(wl.num_sites()):
  for idx2 in range(1,wl.num_kinks(idx1)):
    wl_coordinates.append([idx1,wl_time[idx1][idx2]]);

[wl_coordinates_site, wl_coordinates_time] = numpy.array(wl_coordinates).transpose()

wl_state_segments = [];
for idx1 in range(wl.num_sites()):
  for idx2 in range(wl.num_kinks(idx1)-1):
    wl_state_segments.append([[idx1,wl_time[idx1][idx2]], [idx1,wl_time[idx1][idx2+1]], wl_state[idx1][idx2]])
  wl_state_segments.append([[idx1,wl_time[idx1][wl.num_kinks(idx1)-1]], [idx1,1.0], wl_state[idx1][wl.num_kinks(idx1)-1]]);

wl_n_state_segments = [];
for n in range(21):
  wl_n_state_segments.append([wl_state_segment[0:2] for wl_state_segment in wl_state_segments if wl_state_segment[2] == n]);  

wl_vertex_segments = [];
for idx1 in range(wl.num_sites()):
  for idx2 in range(1,wl.num_kinks(idx1)):
    if   (wl_siteindicator[idx1][idx2] - idx1 == 1):
      wl_vertex_segments.append([[idx1,wl_time[idx1][idx2]],[idx1+0.5,wl_time[idx1][idx2]]]);
    elif (wl_siteindicator[idx1][idx2] - idx1 == -1):
      wl_vertex_segments.append([[idx1-0.5,wl_time[idx1][idx2]],[idx1,wl_time[idx1][idx2]]]);
    elif (idx1 == 0):
      wl_vertex_segments.append([[idx1-0.5,wl_time[idx1][idx2]],[idx1,wl_time[idx1][idx2]]]);
    else:
      wl_vertex_segments.append([[idx1-0.5,wl_time[idx1][idx2]],[idx1+0.5,wl_time[idx1][idx2]]]);
      

### Plot worldlines
matplotlib.pyplot.figure(frameon=False);

matplotlib.pyplot.xticks([]);
matplotlib.pyplot.yticks([0,1]);

if (len(sys.argv) == 2):
  matplotlib.pyplot.xlim(-0.5,wl.num_sites()+0.5);
else:
  xlim = eval(sys.argv[2]);
  matplotlib.pyplot.xlim(xlim[0]-0.5,xlim[1]-0.5);

matplotlib.pyplot.ylim(-0.05,1.05);

# scatter layout
#matplotlib.pyplot.scatter(wl_coordinates_site, wl_coordinates_time);

for wl_n_state_segment in wl_n_state_segments[0]:
  [segment_site, segment_time] = numpy.array(wl_n_state_segment).transpose();  
  matplotlib.pyplot.plot(segment_site, segment_time, '--k', linewidth=2);

for wl_n_state_segment in wl_n_state_segments[1]:
  [segment_site, segment_time] = numpy.array(wl_n_state_segment).transpose();
  matplotlib.pyplot.plot(segment_site, segment_time, '-k', linewidth=2);

wl_n_state_segment_line_spacing = 0.2;  

for n in range(2,21):
  for wl_n_state_segment in wl_n_state_segments[n]:
    [segment_site, segment_time] = numpy.array(wl_n_state_segment).transpose();
    for m in range(n):
      matplotlib.pyplot.plot(segment_site - (m - (n-1)/2.)*wl_n_state_segment_line_spacing, segment_time, '-k', linewidth=2);

for wl_vertex_segment in wl_vertex_segments:
  [segment_site, segment_time] = numpy.array(wl_vertex_segment).transpose();
  matplotlib.pyplot.plot(segment_site, segment_time, '-k', linewidth=2);

matplotlib.pyplot.show();

### OUTFILE
#outfile = infile[0:-3] + ".pdf";
#matplotlib.pyplot.savefig(outfile, transparent=True);
