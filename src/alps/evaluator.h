/***************************************************************************
* ALPS library
*
* alps/evaluator.h   A class to evaluate expressions
*
* $Id$
*
* Copyright (C) 2001-2003 by Matthias Troyer <troyer@comp-phys.org>,
*                            Synge Todo <wistaria@comp-phys.org>,
*
* Permission is hereby granted, free of charge, to any person or organization 
* obtaining a copy of the software covered by this license (the "Software") 
* to use, reproduce, display, distribute, execute, and transmit the Software, 
* and to prepare derivative works of the Software, and to permit others
* to do so for non-commerical academic use, all subject to the following:
*
* The copyright notice in the Software and this entire statement, including 
* the above license grant, this restriction and the following disclaimer, 
* must be included in all copies of the Software, in whole or in part, and 
* all derivative works of the Software, unless such copies or derivative 
* works are solely in the form of machine-executable object code generated by 
* a source language processor.

* In any scientific publication based in part or wholly on the Software, the
* use of the Software has to be acknowledged and the publications quoted
* on the web page http://www.alps.org/license/ have to be referenced.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
* DEALINGS IN THE SOFTWARE.
*
**************************************************************************/

#ifndef ALPS_EVALUATOR_H
#define ALPS_EVALUATOR_H

#include <alps/parameters.h>
#include <string>

namespace alps {

class Expression;
class Evaluator {
public:
  enum Direction { left_to_right, right_to_left};
  Evaluator() {}
  virtual bool can_evaluate(const std::string&) const;
  virtual bool can_evaluate_function(const std::string&, const Expression& ) const;
  virtual double evaluate(const std::string&) const;
  virtual double evaluate_function(const std::string&, const Expression&) const;
  virtual Expression partial_evaluate(const std::string& name) const;
  virtual Expression partial_evaluate_function(const std::string& name, const Expression&) const;
  virtual Direction direction() const;
};

class ParameterEvaluator : public Evaluator {
public:
  ParameterEvaluator(const Parameters& p) : parms_(p) {}
  virtual ~ParameterEvaluator() {}
  bool can_evaluate(const std::string&) const;
  double evaluate(const std::string&) const;
  Expression partial_evaluate(const std::string& name) const;
  const Parameters& parameters() const { return parms_;}
private:
  Parameters parms_;
};
  
} // end namespace alps

#endif // ALPS_EVALUATOR_H
