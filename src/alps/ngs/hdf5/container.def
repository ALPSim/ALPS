/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                                                 *
 * ALPS Project: Algorithms and Libraries for Physics Simulations                  *
 *                                                                                 *
 * ALPS Libraries                                                                  *
 *                                                                                 *
 * Copyright (C) 2010 - 2011 by Lukas Gamper <gamperl@gmail.com>                   *
 *                                                                                 *
 * This software is part of the ALPS libraries, published under the ALPS           *
 * Library License; you can use, redistribute it and/or modify it under            *
 * the terms of the license, either version 1 or (at your option) any later        *
 * version.                                                                        *
 *                                                                                 *
 * You should have received a copy of the ALPS Library License along with          *
 * the ALPS Libraries; see the file LICENSE.txt. If not, the license is also       *
 * available from http://alps.comp-phys.org/.                                      *
 *                                                                                 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,        *
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT       *
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE       *
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,     *
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER     *
 * DEALINGS IN THE SOFTWARE.                                                       *
 *                                                                                 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#ifndef ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS
    #error "no template args defined"
#endif
#ifndef ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE
    #error "no template type defined"
#endif

#include <iterator>
#include <algorithm>

namespace alps {

    template< ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS > struct scalar_type< ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE > {
        typedef typename scalar_type<typename ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE ::value_type>::type type;
    };

    template< ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS > struct has_complex_elements< ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE > 
        : public has_complex_elements<typename ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE ::value_type>
    {};

    namespace detail {

        template<ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS> struct get_extent< ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE > {
            static std::vector<std::size_t> apply( ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE const & value) {
                using alps::get_extent;
                std::vector<std::size_t> result(1, value.size())
                                       , extent(get_extent(value[0]));
                std::copy(extent.begin(), extent.end(), std::back_insert_iterator<std::vector<std::size_t> >(result));
                return result;
            }
        };

        template<ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS> struct set_extent< ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE > {
            static void apply( ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE & value, std::vector<std::size_t> const & extent) {
                using alps::set_extent;
                value.resize(extent[0]);
                if (extent.size() > 1)
                    for(typename ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE ::iterator it = value.begin(); it != value.end(); ++it)
                        set_extent(*it, std::vector<std::size_t>(extent.begin() + 1, extent.end()));
            }
        };

        template<ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS> struct is_vectorizable< ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE > {
            static bool apply( ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE const & value) {
                using alps::get_extent;
                using alps::get_pointer;
                using alps::is_vectorizable;
                if (value.size()) {
                    std::vector<std::size_t> first(get_extent(value[0]));
                    for(typename ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE ::const_iterator it = value.begin(); it != value.end(); ++it) {
                        std::vector<std::size_t> size(get_extent(*it));
                        if (
                               !is_vectorizable(*it) 
                            || first.size() != size.size() 
                            || !std::equal(first.begin(), first.end(), size.begin())
                        )
                            return false;
                    }
                }
                return true;
            }
        };

        template<ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS> struct get_pointer< ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE > {
            static typename alps::scalar_type<ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE>::type * apply( ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE & value) {
                using alps::get_pointer;
                return get_pointer(value[0]);
            }
        };

        template<ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS> struct get_pointer< ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE const> {
            static typename alps::scalar_type<ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE>::type const * apply( ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE const & value) {
                using alps::get_pointer;
                return get_pointer(value[0]);
            }
        };
    }

    template< ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS > void serialize(
          mchdf5 & ar
        , std::string const & path
        , ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE const & value
        , std::vector<std::size_t> size = std::vector<std::size_t>()
        , std::vector<std::size_t> chunk = std::vector<std::size_t>()
        , std::vector<std::size_t> offset = std::vector<std::size_t>()
    ) {
        if (value.size() == 0)
            ar.write(path, static_cast<typename scalar_type< ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE >::type const *>(NULL), std::vector<std::size_t>());
        else if (is_continous<T>::value) {
            std::vector<std::size_t> extent(get_extent(value));
            std::copy(extent.begin(), extent.end(), std::back_insert_iterator<std::vector<std::size_t> >(size));
            std::copy(extent.begin(), extent.end(), std::back_insert_iterator<std::vector<std::size_t> >(chunk));
            std::fill_n(std::back_insert_iterator<std::vector<std::size_t> >(offset), extent.size(), 0);
            ar.write(path, get_pointer(value), size, chunk, offset);
        } else if (is_vectorizable(value)) {
            size.push_back(value.size());
            chunk.push_back(1);
            offset.push_back(0);
            for(typename ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE ::const_iterator it = value.begin(); it != value.end(); ++it) {
                offset.back() = it - value.begin();
                serialize(ar, path, *it, size, chunk, offset);
            }
        } else
            for(typename ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE ::const_iterator it = value.begin(); it != value.end(); ++it)
                serialize(ar, path + "/" + convert<std::string>(it - value.begin()), *it);
    }

    template< ALPS_NGS_HDF5_VECTOR_TEMPLATE_ARGS > void unserialize(
          mchdf5 & ar
        , std::string const & path
        , ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE & value
        , std::vector<std::size_t> chunk = std::vector<std::size_t>()
        , std::vector<std::size_t> offset = std::vector<std::size_t>()
    ) {
        if (ar.is_group(path)) {
            std::vector<std::string> children = ar.list_children(path);
            value.resize(children.size());
            for (typename std::vector<std::string>::const_iterator it = children.begin(); it != children.end(); ++it)
                unserialize(ar, path + "/" + *it, value[convert<std::size_t>(*it)]);
        } else { 
            std::vector<std::size_t> size(ar.extent(path));
            if (is_continous<T>::value) {
                set_extent(value, std::vector<std::size_t>(size.begin() + chunk.size(), size.end()));
                std::copy(size.begin() + chunk.size(), size.end(), std::back_insert_iterator<std::vector<std::size_t> >(chunk));
                std::fill_n(std::back_insert_iterator<std::vector<std::size_t> >(offset), size.size() - offset.size(), 0);
                ar.read(path, get_pointer(value), chunk, offset);
            } else {
                chunk.push_back(1);
                offset.push_back(0);
                for(typename ALPS_NGS_HDF5_VECTOR_TEMPLATE_TYPE ::iterator it = value.begin(); it != value.end(); ++it) {
                    offset.back() = it - value.begin();
                    serialize(ar, path, *it, chunk, offset);
                }
            }
        }
    }

}
