/***************************************************************************
* ALPS++/scheduler library
*
* scheduler/info.h   A class to store parameters
*
* $Id$
*
* Copyright (C) 1994-2003 by Matthias Troyer <troyer@itp.phys.ethz.ch>,
*
* Permission is hereby granted, free of charge, to any person or organization 
* obtaining a copy of the software covered by this license (the "Software") 
* to use, reproduce, display, distribute, execute, and transmit the Software, 
* and to prepare derivative works of the Software, and to permit others
* to do so for non-commerical academic use, all subject to the following:
*
* The copyright notice in the Software and this entire statement, including 
* the above license grant, this restriction and the following disclaimer, 
* must be included in all copies of the Software, in whole or in part, and 
* all derivative works of the Software, unless such copies or derivative 
* works are solely in the form of machine-executable object code generated by 
* a source language processor.

* In any scientific publication based in part or wholly on the Software, the
* use of the Software has to be acknowledged and the publications quoted
* on the web page http://www.alps.org/license/ have to be referenced.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
* DEALINGS IN THE SOFTWARE.
*
**************************************************************************/

#ifndef ALPS_SCHEDULER_INFO_H
#define ALPS_SCHEDULER_INFO_H

#include <alps/scheduler/types.h>
#include <alps/osiris.h>
#include <iterator>
#include <ctime>

namespace alps {
namespace scheduler {

//=======================================================================
// Info
//
// information about a specific computation on a worker
//-----------------------------------------------------------------------

class TaskInfo;

class Info 
{
  friend class TaskInfo;
public:
  Info();
  void start(const std::string&); // register that it is started/restarted NOW
  void halt(); // register that it is halted/thermalized NOW
  void checkpoint(); // we are checkpointing, update info beforehand
  
  // write the info
  void save (ODump&) const;
  ALPS_DUMMY_VOID write_xml(std::ostream&) const;
  void load (IDump& dump,int version=MCDump_task_version);
private:
   // how was it stopped? ... for historic reasons
  enum { HALTED=1, INTERRUPTED=2, THERMALIZED=3, NOTSTARTED=4 };
  time_t startt; // start time
  time_t stopt; // stop time
  std::string phase; // what was  done?
  std::string host; // which host is it running on?
};


class TaskInfo : public std::vector<Info> 
{
public:
  TaskInfo() {}

  void start(const std::string&); // the run is started/restarted NOW
  void halt(); // the run is halted/thermalized NOW
  
  void save (ODump& dump) const;
  void load (IDump& dump,int version=MCDump_task_version);
  void write_xml(std::ostream&) const;
};

} // end namespace scheduler
} // end namespace alps

#ifndef BOOST_NO_OPERATORS_IN_NAMESPACE
namespace alps {
namespace scheduler {
#endif

inline std::ostream& operator<<(std::ostream& o,const alps::scheduler::Info& i)
{
  i.write_xml(o);
  return o;
}

inline alps::IDump& operator>>(alps::IDump& dump, alps::scheduler::Info& i)
{
  i.load(dump);
  return dump;
}

inline alps::ODump& operator<< (alps::ODump& dump, const alps::scheduler::Info& info)
{
  info.save(dump);
  return dump;
}

inline std::ostream& operator<<(std::ostream& o,const alps::scheduler::TaskInfo& i)
{
  i.write_xml(o);
  return o;
}

inline alps::IDump& operator>>(alps::IDump& dump, alps::scheduler::TaskInfo& i)
{
  i.load(dump);
  return dump;
}

inline alps::ODump& operator<< (alps::ODump& dump, const alps::scheduler::TaskInfo& info)
{
  info.save(dump);
  return dump;
}


#ifndef BOOST_NO_OPERATORS_IN_NAMESPACE
} // namespace scheduler
} // namespace alps
#endif

#endif
