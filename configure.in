dnl Process this file with autoconf to produce a configure script.

dnl
dnl Initialization
dnl

dnl disable loading config.site
define([AC_SITE_LOAD], )dnl

AC_PREREQ(2.54)
AC_INIT([alps],[1.0b7])
AC_CONFIG_AUX_DIR([config])

AC_PREFIX_DEFAULT([$HOME/ALPS])

if test -f "$srcdir/src/alps/lattice.h"; then
   ac_cv_alps_type="full"
else
   ac_cv_alps_type="light"
fi	

if test "$ac_cv_alps_type" = "full"; then
  AC_MSG_NOTICE([starting configuration for ALPS library version $PACKAGE_VERSION])
else
  AC_MSG_NOTICE([starting configuration for ALPS light library version $PACKAGE_VERSION])
fi

ac_cv_alps_version="$PACKAGE_VERSION"
AC_DEFINE_UNQUOTED([ALPS_VERSION], ["$PACKAGE_VERSION"])

CURRENT_YEAR=2004
AC_DEFINE_UNQUOTED([ALPS_YEAR], ["$CURRENT_YEAR"])

AC_CONFIG_HEADERS(src/alps/config.h)

AC_CONFIG_FILES(Makefile)
AC_CONFIG_FILES(config/Makefile config/config.site config/arxx config/include.mk)
AC_CONFIG_FILES(src/Makefile)
AC_CONFIG_FILES(test/Makefile example/Makefile)
AC_CONFIG_FILES(test/fixed_capacity/Makefile)
AC_CONFIG_FILES(test/osiris/Makefile test/osiris/xdrdump2.input)
AC_CONFIG_FILES(test/parameter/Makefile)
AC_CONFIG_FILES(test/parser/Makefile)
AC_CONFIG_FILES(doc/Makefile)

if test "$ac_cv_alps_type" = "full"; then
  AC_CONFIG_FILES(test/alea/Makefile)
  AC_CONFIG_FILES(test/lattice/Makefile test/lattice/lattices.xml test/lattice/parameters)
  AC_CONFIG_FILES(test/model/Makefile test/model/lattices.xml test/model/models.xml test/model/parameters)
  AC_CONFIG_FILES(example/scheduler/Makefile)
  AC_CONFIG_FILES(example/model/Makefile)
  AC_CONFIG_FILES(tool/Makefile tool/plot2xsl.xsl tool/extracttext tool/extracthtml tool/convert2text)
fi

if test -f "$srcdir/dist/Makefile.in"; then
  AC_CONFIG_FILES(dist/Makefile)
fi

AC_SUBST(OBJ_FULL)
AC_SUBST(HEADER_FULL)
AC_SUBST(DOC_FULL)
if test "$ac_cv_alps_type" = "full"; then
   OBJ_FULL='$(OBJ_FULL)'
   HEADER_FULL='$(HEADER_FULL)'
   DOC_FULL='$(DOC_FULL)'
fi

# making directories if not exist
if test "$ac_cv_alps_type" = "full"; then
  dirs='boost alps/alea alps/lattice alps/model alps/osiris alps/parser alps/random alps/scheduler'
else
  dirs='boost alps/osiris alps/parser alps/random'
fi
for d in $dirs; do
  if test -d "src/$d"; then :; else mkdir -p "src/$d"; fi
done

# setting up cache file
cache_file='config/config.cache'
if test -d "config"; then :; else mkdir config; fi
if test -f $cache_file; then :; else touch $cache_file; fi

# fix directories
test "$prefix" = NONE && prefix=$ac_default_prefix
test "$exec_prefix" = NONE && exec_prefix=$prefix
test "$bindir" = '${exec_prefix}/bin' && bindir="$exec_prefix/bin"
test "$datadir" = '${prefix}/share' && datadir="$prefix/share"
test "$libdir" = '${exec_prefix}/lib' && libdir="$exec_prefix/lib"
test "$includedir" = '${prefix}/include' && includedir="$prefix/include"

# directory for documentation
AC_SUBST(docdir)
docdir="$prefix/doc"

ac_cv_alps_prefix="$prefix"
ac_cv_alps_exec_prefix="$exec_prefix"
ac_cv_alps_bindir="$bindir"
ac_cv_alps_datadir="$datadir"
ac_cv_alps_libdir="$libdir"
ac_cv_alps_includedir="$includedir"
ac_cv_alps_docdir="$docdir"

ac_cv_alps_include_mk="$datadir/$PACKAGE_NAME/include.mk"
ac_cv_alps_rules_mk="$datadir/$PACKAGE_NAME/rules.mk"
ac_cv_alps_rules_lib_mk="$datadir/$PACKAGE_NAME/rules-lib.mk"

#
# Tools/Programs
#

# C/C++ compiler
sinclude(config/ac_compiler.m4)
AC_COMPILER
ac_cv_alps_compiler="$ac_cv_compiler"
ac_cv_alps_compiler_exceptions="$ac_cv_compiler_exceptions"
ac_cv_alps_compiler_optimization="$ac_cv_compiler_optimization"
ac_cv_alps_compiler="$ac_cv_compiler"
ac_cv_alps_cc="$ac_cv_compiler_cc"
ac_cv_alps_cflags="$ac_cv_compiler_cflags"
ac_cv_alps_cxx="$ac_cv_compiler_cxx"
ac_cv_alps_cxxflags="$ac_cv_compiler_cxxflags"

# C/C++ preprocessor
AC_PROG_CPP
AC_PROG_CXXCPP

ac_cv_alps_cpp="$CPP"
ac_cv_alps_cxxcpp="$CXXCPP"

# Install script
AC_PROG_INSTALL
AC_SUBST(ALPS_INSTALL)
if test "$INSTALL" = "$ac_install_sh"; then
  ALPS_INSTALL='$(install_sh) -c'
else
  ALPS_INSTALL="$INSTALL"
fi

# other tools
AC_SUBST(AR)
AC_SUBST(ARXX)
AR="ar cru"
ARXX="$bindir/arxx"
AC_PROG_LN_S

AC_SUBST(RANLIB)
test "$ac_cv_alps_compiler" = "sgi32" && RANLIB="/bin/true"
test "$ac_cv_alps_compiler" = "sgi64" && RANLIB="/bin/true"
AC_PROG_RANLIB

#
# checking boost directory
#

AC_SUBST(BOOST_CPPFLAGS)
AC_SUBST(BOOST_LDFLAGS)
AC_SUBST(BOOST_LIBS)

ac_cv_use_precompiled_boost=

AC_ARG_WITH(boost,
  AC_HELP_STRING([--with-boost=DIR],[Boost main tree]),
  [
  if test "x$withval" != "x"; then
    ac_cv_use_precompiled_boost=no
    boost_dir=`echo "$withval" | sed 's,//*,/,g' | sed 's,/$,,'`
    if test -f "$boost_dir/boost/config.hpp"; then :; else
      AC_MSG_ERROR([Boost main tree not found])
    fi
    if test -f "$boost_dir/libs/filesystem/src/exception.cpp"; then :; else
      AC_MSG_ERROR([Boost main tree not found])
    fi
    boost_incdir="$boost_dir"
    boost_srcdir="$boost_dir/libs"
  fi
  ]
)
AC_ARG_WITH(boost-incdir,
  AC_HELP_STRING([--with-boost-incdir=DIR],[Boost include directory (only for precompiled Boost library)]),
  [
  if test "x$withval" != "x"; then
    ac_cv_use_precompiled_boost=yes
    boost_incdir=`echo "$withval" | sed 's,//*,/,g' | sed 's,/$,,'`
    if test -f "$boost_incdir/boost/config.hpp"; then :; else
      AC_MSG_ERROR([Boost include files not found])
    fi
  fi
  ]
)
AC_ARG_WITH(boost-libdir,
  AC_HELP_STRING([--with-boost-libdir=DIR],[Boost library directory (only for precompiled Boost library)]),
  [
  if test "x$withval" != "x"; then
    ac_cv_use_precompiled_boost=yes
    boost_libdir=`echo "$withval" | sed 's,//*,/,g' | sed 's,/$,,'`
  fi
  ]
)
AC_ARG_WITH(boost-libs,
  AC_HELP_STRING([--with-boost-libs=LIBS],[Boost libraries (only for precompiled Boost library)]),
  [
  if test "x$withval" != "x"; then
    ac_cv_use_precompiled_boost=yes
    boost_libs=`echo "$withval" | sed 's,//*,/,g' | sed 's,/$,,'`
  fi
  ]
)
AC_ARG_WITH(boost-toolset,
  AC_HELP_STRING([--with-boost-toolset=TOOLSET],[Boost toolset abbreviation, e.g. gcc-d for gcc with debugging, il-mt for intel-linux with multi-threading etc (default none) (only for precompiled Boost library)]),
  [
  if test "x$withval" != "x"; then
    ac_use_precompiled_boost=yes
    boost_toolset=`echo "$withval" | sed 's,//*,/,g' | sed 's,/$,,'`
  fi
  ]
)
AC_ARG_WITH(boost-all,
  AC_HELP_STRING([--with-boost-all],[compile all optional Boost libraries]), [
    if test "x$withval" = "xno"; then
      ac_cv_boost_signals=no
      ac_cv_boost_thread=no
    else
      ac_cv_boost_signals=yes
      ac_cv_boost_thread=yes
    fi
  ]
)
AC_ARG_WITH(boost-signals,
  AC_HELP_STRING([--with-boost-signals],[compile Boost::signals library]), [
    if test "x$withval" = "xno"; then
      ac_cv_boost_signals=no
    else
      ac_cv_boost_signals=yes
    fi
  ]
)
AC_ARG_WITH(boost-thread,
  AC_HELP_STRING([--with-boost-thread],[compile boost::thread library]), [
    if test "x$withval" = "xno"; then
      ac_cv_boost_thread=no
    else
      ac_cv_boost_thread=yes
    fi
  ]
)

boost_dir_s=

for d in $HOME $HOME/src $prefix $prefix/src /usr/local /usr/local/src
do
  if test -f "$d/boost/boost/config.hpp"; then
    if test -f "$d/boost/libs/filesystem/src/exception.cpp"; then
      boost_dir_s="$d/boost"
      boost_incdir_s="$d/boost"
      boost_srcdir_s="$d/boost/libs"
      break
    fi
  fi
done

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
ac_save_CPPFLAGS=$CPPFLAGS
ac_save_LDFLAGS=$LDFLAGS
ac_save_LIBS=$LIBS

AC_MSG_CHECKING([for Boost include files])
found=no

ac_cv_boost_incdir=

if test -n "$boost_incdir"; then
  ac_cv_boost_incdir="$boost_incdir"
  BOOST_CPPFLAGS="-I$boost_incdir"
  CPPFLAGS="$BOOST_CPPFLAGS $ac_save_CPPFLAGS"
fi
AC_TRY_COMPILE([#include <boost/config.hpp>],,found=yes)

if test "$found" = no; then
  if test -n "$boost_incdir_s"; then
    ac_cv_boost_incdir="$boost_incdir_s"
    BOOST_CPPFLAGS="-I$boost_incdir_s"
    CPPFLAGS="$BOOST_CPPFLAGS $ac_save_CPPFLAGS"
    AC_TRY_COMPILE([#include <boost/config.hpp>],,found=yes)
  fi
fi

if test "$found" = yes; then
  if test -n "$BOOST_CPPFLAGS"; then
    AC_MSG_RESULT([$BOOST_CPPFLAGS])
  else
    AC_MSG_RESULT([yes])
  fi
else
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([Boost include files not found])
fi

dnl pre-compiled boost library

if test "$ac_cv_use_precompiled_boost" = no; then :; else

  AC_MSG_CHECKING([for Boost toolset abbreviation])
  if test -n "$boost_toolset"; then
    AC_MSG_RESULT([$boost_toolset])
  else
    AC_MSG_RESULT([none])
  fi

  AC_MSG_CHECKING([for pre-compiled Boost library])
  found=no

  if test -n "$boost_libdir"; then
    BOOST_LDFLAGS="-L$boost_libdir"
    LDFLAGS="$BOOST_LDFLAGS $ac_save_LDFLAGS"
  fi
  if test -n "$boost_libs"; then
    BOOST_LIBS="$boost_libs"
    LIBS="$BOOST_LIBS $ac_save_LIBS"
  else
    if test -z "$boost_toolset"; then
      BOOST_LIBS="-lboost_date_time -lboost_filesystem -lboost_regex"
    else
      BOOST_LIBS="-lboost_date_time-$boost_toolset -lboost_filesystem-$boost_toolset -lboost_regex-$boost_toolset"
    fi
    LIBS="$BOOST_LIBS $ac_save_LIBS"
  fi

  AC_TRY_LINK([
    #include <boost/date_time/date_generators.hpp>
  ],[const char *ptr = boost::date_time::nth_as_str(0);],
  found=yes)

  if test "$found" = yes; then
    found=no
    AC_TRY_LINK([
      #include <boost/filesystem/operations.hpp>
      #include <boost/filesystem/path.hpp>
    ],[boost::filesystem::path p(boost::filesystem::initial_path());],
    found=yes)
  fi

  if test "$found" = yes; then
    found=no
    AC_TRY_LINK([
      #include <boost/regex.hpp>
    ],[boost::regbase re;],
    found=yes)
  fi

  if test "$found" = yes; then
    AC_MSG_RESULT([$BOOST_LDFLAGS $BOOST_LIBS])
    ac_cv_use_precompiled_boost=yes
  else
    BOOST_LDFLAGS=
    BOOST_LIBS=
    AC_MSG_RESULT([no])
    if test "$ac_cv_use_precompiled_boost" = yes; then
      AC_MSG_ERROR([Boost library not found])
    fi
  fi

  if test "$ac_cv_use_precompiled_boost" = yes; then
    AC_MSG_CHECKING([for Boost::signals library])
    ac_cv_boost_signals=no
    if test -n "$boost_libs"; then
      BOOST_SIGNALS_LIBS=
    else
      if test -z "$boost_toolset"; then
        BOOST_SIGNALS_LIBS="-lboost_signals"
      else
        BOOST_SIGNALS_LIBS="-lboost_signals-$boost_toolset"
      fi
    fi
    LIBS="$BOOST_LIBS $BOOST_SIGNALS_LIBS $ac_save_LIBS"
    AC_TRY_LINK([
      #include <boost/signals/signal2.hpp>
      #include <string>
    ],[boost::signal2<void, int, int, boost::last_value<void>, std::string> sig;],
    ac_cv_boost_signals=yes)
    if test "$ac_cv_boost_signals" = yes; then
      if test -n "$BOOST_SIGNALS_LIBS"; then
        AC_MSG_RESULT([$BOOST_SIGNALS_LIBS])
        BOOST_LIBS="$BOOST_LIBS $BOOST_SIGNALS_LIBS"
      else
        AC_MSG_RESULT([yes])
      fi
    else
      AC_MSG_RESULT([no])
    fi

    AC_MSG_CHECKING([for Boost::thread library])
    ac_cv_boost_thread=no
    if test -n "$boost_libs"; then
      BOOST_THREAD_LIBS=
    else
      if test -z "$boost_toolset"; then
        BOOST_THREAD_LIBS="-lboost_thread"
      else
        BOOST_THREAD_LIBS="-lboost_thread-$boost_toolset"
      fi
    fi
    LIBS="$BOOST_LIBS $BOOST_THREAD_LIBS $ac_save_LIBS"
    AC_TRY_LINK([#include <boost/thread/xtime.hpp>],
      [int x = boost::xtime_get(0, 0);],
      ac_cv_boost_thread=yes)
    if test "$ac_cv_boost_thread" = yes; then
      if test -n "$BOOST_THREAD_LIBS"; then
        AC_MSG_RESULT([$BOOST_THREAD_LIBS])
        BOOST_LIBS="$BOOST_LIBS $BOOST_THREAD_LIBS"
      else
        AC_MSG_RESULT([yes])
      fi
    else
      AC_MSG_RESULT([no])
    fi
  fi
fi

dnl boost sources

AC_SUBST(OBJ_BOOST)
AC_SUBST(BOOST_SRCDIR)

if test "$ac_cv_use_precompiled_boost" = yes; then :; else
  AC_MSG_CHECKING([for Boost source files])
  ac_cv_use_precompiled_boost=no
  if test -n "$boost_srcdir"; then
    AC_MSG_RESULT([$boost_srcdir])
    BOOST_SRCDIR="$boost_srcdir"
    OBJ_BOOST='$(OBJ_BOOST)'
  else
    if test -n "$boost_srcdir_s"; then
      AC_MSG_RESULT([$boost_srcdir_s])
      BOOST_SRCDIR="$boost_srcdir_s"
      OBJ_BOOST='$(OBJ_BOOST)'
    else
      AC_MSG_RESULT([no])
      AC_MSG_ERROR([Boost source files not found])
    fi
  fi
fi

CPPFLAGS="$ac_save_CPPFLAGS"
LDFLAGS="$ac_save_LDFLAGS"
LIBS="$ac_save_LIBS"
AC_LANG_RESTORE

ac_cv_boost_cppflags="$BOOST_CPPFLAGS"
ac_cv_boost_ldflags="$BOOST_LDFLAGS"
ac_cv_boost_libs="$BOOST_LIBS"
ac_cv_boost_srcdir="$BOOST_SRCDIR"


#
# checking for system headers
#

AC_LANG_CPLUSPLUS

AC_CHECK_HEADER([stdarg.h])
test "$ac_cv_header_stdarg_h" = yes && AC_DEFINE(ALPS_HAVE_STDARG_H)

AC_CHECK_HEADER([stdint.h])
test "$ac_cv_header_stdint_h" = yes && AC_DEFINE(ALPS_HAVE_STDINT_H)

AC_CHECK_HEADER([inttypes.h])
test "$ac_cv_header_inttypes_h" = yes && AC_DEFINE(ALPS_HAVE_INTTYPES_H)

AC_CHECK_HEADER([unistd.h])
test "$ac_cv_header_unistd_h" = yes && AC_DEFINE(ALPS_HAVE_UNISTD_H)

AC_CHECK_HEADER([bind/bitypes.h])
test "$ac_cv_header_bind_bitypes_h" = yes && AC_DEFINE(ALPS_HAVE_BIND_BITYPES_H)

AC_CHECK_HEADER([sys/int_types.h])
test "$ac_cv_header_sys_int_types_h" = yes && AC_DEFINE(ALPS_HAVE_SYS_INT_TYPES_H)

AC_CHECK_HEADER([sys/systeminfo.h])
test "$ac_cv_header_sys_systeminfo_h" = yes && AC_DEFINE(ALPS_HAVE_SYS_SYSTEMINFO_H)

AC_CHECK_HEADER([sys/time.h])
test "$ac_cv_header_sys_time_h" = yes && AC_DEFINE(ALPS_HAVE_SYS_TIME_H)

AC_CHECK_HEADER([sys/types.h])
test "$ac_cv_header_sys_types_h" = yes && AC_DEFINE(ALPS_HAVE_SYS_TYPES_H)

# checking for other C++ headers
sinclude(config/ac_cxx_namespaces.m4)

AC_CHECK_HEADER([cstdlib],,
  [
  if test -n "$ac_cv_boost_incdir"; then
    if test -f "$ac_cv_boost_incdir/boost/compatibility/cpp_c_headers/cstdlib"; then
      CPPFLAGS="-I$ac_cv_boost_incdir/boost/compatibility/cpp_c_headers $CPPFLAGS"
    fi
    AC_MSG_NOTICE([$ac_cv_boost_incdir/boost/compatibility/cpp_c_headers was added to include path])
  else
    AC_MSG_ERROR([cstdlib not fount])
  fi
  ]
)

sinclude(config/ac_cxx_have_valarray.m4)
AC_CXX_HAVE_VALARRAY
test "$ac_cv_cxx_have_valarray" = yes && AC_DEFINE(ALPS_HAVE_VALARRAY)

#
# check for libm
#

AC_CHECK_LIB(m, sqrt)

#
# check for nanosleep
#

AC_CHECK_FUNC(nanosleep, ,[AC_CHECK_LIB(rt, nanosleep)])

#
# check for pthread
#

sinclude(config/ac_pthread.m4)
AC_PTHREAD
if test "$ac_cv_have_pthread" = yes; then
  AC_DEFINE(ALPS_HAVE_PTHREAD)
fi

#
# check for MPI
#

AC_SUBST(LIB_MPI)
ac_cv_alps_have_mpi=no
sinclude(config/ac_mpi.m4)
AC_MPI
if test "$ac_cv_have_mpi" = yes; then
  ac_cv_alps_have_mpi=yes
  AC_DEFINE(ALPS_HAVE_MPI)
  LIB_MPI='$(LIB_MPI)'
fi

#
# check for PVM
#

AC_SUBST(LIB_PVM)
ac_cv_alps_have_pvm=no
sinclude(config/ac_pvm.m4)
AC_PVM
if test "$ac_cv_have_pvm" = yes; then
  ac_cv_alps_have_pvm=yes
  AC_DEFINE(ALPS_HAVE_PVM)
  LIB_PVM='$(LIB_PVM)'
fi

#
# check for HDF5
#

sinclude(config/ac_hdf5.m4)
AC_HDF5
test "$ac_cv_have_hdf5" = yes && AC_DEFINE(ALPS_HAVE_HDF5)

#
# check for XML parser
#

sinclude(config/ac_xmlparser.m4)
AC_XMLPARSER
test "$ac_cv_xml_parser" = "expat" && AC_DEFINE(ALPS_HAVE_EXPAT_PARSER)
test "$ac_cv_xml_parser" = "xerces" && AC_DEFINE(ALPS_HAVE_XERCES_PARSER)

#
# boost object libraries
# 

# check whether Boost::signals is compiled
AC_SUBST(OBJ_BOOST_SIGNALS)
OBJ_BOOST_SIGNALS=
if test "$ac_cv_use_precompiled_boost" = yes; then :; else
  AC_MSG_CHECKING([whether Boost::signals is compiled])
  test -z "$ac_cv_boost_signals" && ac_cv_boost_signals=no
  if test "$ac_cv_boost_signals" = yes; then
    OBJ_BOOST_SIGNALS='$(OBJ_BOOST_SIGNALS)'
    AC_MSG_RESULT([yes])
  else
    AC_MSG_RESULT([no])
  fi
fi

# check whether boost::thread is compiled
AC_SUBST(OBJ_BOOST_THREAD)
OBJ_BOOST_THREAD=
if test "$ac_cv_use_precompiled_boost" = yes; then :; else
  AC_MSG_CHECKING([whether boost::thread is compiled])
  test -z "$ac_cv_boost_thread" && ac_cv_boost_thread=no
  if test "$ac_cv_have_pthread" = yes; then
    if test "$ac_cv_boost_thread" = yes; then
      OBJ_BOOST_THREAD='$(OBJ_BOOST_THREAD)'
      AC_MSG_RESULT([yes])
    else
      AC_MSG_RESULT([no])
    fi
  else
    AC_MSG_RESULT([no])
  fi
fi

# check whether Boost::configure is used or not
AC_ARG_ENABLE(boost-config,
  AC_HELP_STRING([--enable-boost-config],
    [setup Boost configuration header file]),
  [
  if test "x$enableval" != "xno"; then
    ac_cv_boost_config=yes
  fi
  ]
)
AC_SUBST(BOOST_USER_CONFIG_H)
BOOST_USER_CONFIG_H=
if test "$ac_cv_use_precompiled_boost" = yes; then
  ac_cv_boost_config=no
else
  AC_MSG_CHECKING([whether use Boost configuration header file])
  test -z "$ac_cv_boost_config" && ac_cv_boost_config=no
  if test "$ac_cv_boost_config" = yes; then
    ac_cv_boost_config="$includedir/$PACKAGE_NAME/boost-user.hpp"
    if test -f "$boost_srcdir/config/configure"; then :; else
      AC_MSG_RESULT
      AC_MSG_ERROR([Boost configure script was not found.])
    fi
  fi
  AC_MSG_RESULT([$ac_cv_boost_config])
fi
  
#
# configure boost if needed
#

if test "$ac_cv_boost_config" != no; then
  AC_MSG_NOTICE([running Boost configuration script])
  boost_configure="sh $boost_srcdir/config/configure"
  mkdir -p src/boost
  command="(cd src/boost && export CXX=\"$CXX\" CXXFLAGS=\"$CXXFLAGS\" CPPFLAGS=\"$CPPFLAGS\" LDFLAGS=\"$LDFLAGS\" && $boost_configure --with-boost=$boost_incdir)"
  echo "$command"
  eval "$command"
  CPPFLAGS="$CPPFLAGS -DBOOST_USER_CONFIG=\<boost/user.hpp\>"
  BOOST_USER_CONFIG_H="boost/user.hpp"
fi

# setup BASE_CPPFLAGS, BASE_LDFLAGS, BASE_LIBS

AC_SUBST(BASE_CPPFLAGS)
BASE_CPPFLAGS="$CPPFLAGS"
ac_cv_base_cppflags="$CPPFLAGS"
AC_SUBST(BASE_LDFLAGS)
BASE_LDFLAGS="$LDFLAGS"
ac_cv_base_ldflags="$LDFLAGS"
AC_SUBST(BASE_LIBS)
BASE_LIBS="$LIBS"
ac_cv_base_libs="$LIBS"

ac_cv_alps_cppflags="$ac_cv_base_cppflags $ac_cv_xml_cppflags $ac_cv_hdf5_cppflags $ac_cv_boost_cppflags -I$ac_cv_alps_includedir"
ac_cv_alps_ldflags="$ac_cv_base_ldflags $ac_cv_xml_ldflags $ac_cv_hdf5_ldflags $ac_cv_boost_ldflags -L$ac_cv_alps_libdir"
ac_cv_alps_libs="-lalps -lcomm-sgl $ac_cv_boost_libs $ac_cv_hdf5_libs $ac_cv_xml_libs $ac_cv_base_libs"

ac_cv_alps_cppflags_mpi="$ac_cv_alps_cppflags $ac_cv_mpi_cppflags"
ac_cv_alps_ldflags_mpi="$ac_cv_alps_ldflags $ac_cv_mpi_ldflags"
ac_cv_alps_libs_mpi="-lalps -lcomm-mpi $ac_cv_mpi_libs $ac_cv_boost_libs $ac_cv_hdf5_libs $ac_cv_xml_libs $ac_cv_base_libs"

ac_cv_alps_cppflags_pvm="$ac_cv_alps_cppflags $ac_cv_pvm_cppflags"
ac_cv_alps_ldflags_pvm="$ac_cv_alps_ldflags $ac_cv_pvm_ldflags"
ac_cv_alps_libs_pvm="-lalps -lcomm-pvm $ac_cv_pvm_libs $ac_cv_boost_libs $ac_cv_hdf5_libs $ac_cv_xml_libs $ac_cv_base_libs"

#
# Generate files
#

AC_OUTPUT

dnl
dnl output summary
dnl

echo
echo "Summary of configuration:"
echo "  ALPS version      $PACKAGE_VERSION"
echo "  compiler type     $ac_cv_alps_compiler"
echo "  exceptions        $ac_cv_alps_compiler_exceptions"
echo "  optimization      $ac_cv_alps_compiler_optimization"
echo "  MPI support       $ac_cv_alps_have_mpi"
echo "  PVM support       $ac_cv_alps_have_pvm"
echo "  pthread support   $ac_cv_have_pthread"
echo "  HDF5 support      $ac_cv_have_hdf5"
echo "  XML parser        $ac_cv_xml_parser"
